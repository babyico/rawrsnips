{
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}';$0",
    "description": "Imports entire module statement in ES6 syntax"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}';$0",
    "description": "Imports entire module in ES6 syntax without module name"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}';$0",
    "description": "Imports only a portion of the module in ES6 syntax"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}';$0",
    "description": "Imports everything as alias from the module in ES6 syntax"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
    "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
  },
  "require": {
    "prefix": "rqr",
    "body": "require('${1:package}');",
    "description": "Require a package"
  },
  "requireToConst": {
    "prefix": "req",
    "body": "const ${1:packageName} = require('${1:package}');$0",
    "description": "Require a package to const"
  },
  "moduleExports": {
    "prefix": "mde",
    "body": "module.exports = {\n\t$0\n};\n",
    "description": "Module exports from Common JS, node syntax at ES6"
  },
  "exportNamedVariable": {
    "prefix": "env",
    "body": "export const ${1:exportVariable} = ${2:localVariable};\n",
    "description": "Export named variable in ES6 syntax"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n",
    "description": "Export named function in ES6 syntax"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n",
    "description": "Export default function in ES6 syntax"
  },
  "exportClass": {
    "prefix": "ecl",
    "body": "export default class ${1:className} {\n\t$0\n};\n",
    "description": "Export default class in ES6 syntax"
  },
  "exportClassExtends": {
    "prefix": "ece",
    "body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n",
    "description": "Export default class which extends a base one in ES6 syntax"
  },

  "constructor": {
    "prefix": "con",
    "body": "constructor(${1:params}) {\n\t${0}\n}",
    "description": "Add default constructor in a class in ES6 syntax"
  },
  "method": {
    "prefix": "met",
    "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
    "description": "Creates a method inside a class in ES6 syntax"
  },
  "propertyGet": {
    "prefix": "pge",
    "body": "get ${1:propertyName}() {\n\treturn this.${0};\n}",
    "description": "Creates a getter property inside a class in ES6 syntax"
  },
  "propertyset": {
    "prefix": "pse",
    "body": "set ${1:propertyName}(${2:value}) {\n\t${0};\n}",
    "description": "Creates a setter property inside a class in ES6 syntax"
  },

  "forEach": {
    "prefix": "fre",
    "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n});",
    "description": "Creates a forEach statement in ES6 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property values of iterable objects"
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": "(${1:params}) => {\n\t${2}\n}",
    "description": "Creates an anonymous function in ES6 syntax"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct};",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct};",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms});",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms});",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  "promise": {
    "prefix": "prom",
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n});",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "thenCatch": {
    "prefix": "thenc",
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n});",
    "description": "Add the .then and .catch methods to handle promises"
  },

  "consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object});",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear();",
    "description": "Clears the console"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": "console.count(${1:label});",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
    "consoleDebug": {
    "prefix": "cdb",
    "body": "console.debug(${1:object});",
    "description": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object});",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object});",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group('${1:label}');",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd();",
    "description": "Closes out the corresponding console.group()."
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object});",
    "description": "Displays a message in the console"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log('${1:object} :>> ', ${1:object});",
    "description": "Displays an object in the console with its name"
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object});",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object});",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object});",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "consoleTable": {
    "prefix": "clt",
    "body": "console.table(${1:object});",
    "description": "Displays tabular data as a table."
  },
  "consoleTime": {
    "prefix": "cti",
    "body": "console.time(${1:object});",
    "description": "Sets starting point for execution time measurement"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd(${1:object});",
    "description": "Sets end point for execution time measurement"
  },
  "constDiscord": {
    "prefix": ["req.discord","cdjs"],
    "body": "const { Client, Collection, GatewayIntentBits, Partials, Events } = require('discord.js');",
    "description": "Adds default consts from discord.js"
  },
  "constClient": {
    "prefix": ["req.client","cclt"],
    "body": "const { Client } = require('discord.js');",
    "description": "Adds const Client from discord.js"
  },
  "reqDiscord": {
    "prefix": ["req.djs","cclt"],
    "body": "const { ${1:name} } = require('discord.js');",
    "description": "Adds const from discord.js"
  },
  "djsEvent": {
    "prefix": ["djs.event","edjs", "eventdjs", "evdjs"],
    "body": [
      "module.exports = {",
            "   name: \"\",",
            "",
            "   run: async () => {",
            "",
            "    },",
            "};"
    ],
    "description": "Creates a basic event for Discord bot using the discord.js"
  },
  "djsSlashCmd": {
    "prefix": ["djs.slash","sldjs", "slashdjs", "sladjs"],
    "body": [
      "const Discord = require('discord.js');",
            "",
            "module.exports = {",
            "    data: {",
            "        name: \"\",",
            "        description: \"\",",
            "        options: [",
            "            {",
            "                name: \"\",",
            "                type: 3,",
            "                description: \"\",",
            "                required: true",
            "            }",
            "        ]",
            "    },",
            "",
            "    run: async (interaction) => {",
            "",
            "    },",
            "};"
    ],
    "description": "Creates a basic slash command for Discord bot using the discord.js"
  },
  "messageSend": {
    "prefix": ["djs.msg","msgdjs", "mchannel", "mdjs"],
    "body" : "${1:message}.channel.send(`${2:urmessage}`)",
    "description":"Sends a message to the channel where the command was called."
  },
  "embedCreate": {
    "prefix": ["djs.embed","ecreate", "embedjs", "emdjs"],
    "body": [
      "const embed = new Discord.EmbedBuilder()",
            "\t.setColor(0xfcd0da)",
            "\t.setTitle('${1:title}')",
            "\t.setDescription('${2:description}')",
            "\t.addFields(",
            "\t\t{ name: '${3:title}', value: '${4:value}', inline: ${5:false} },",
            "\t)",
            "",
            "\tchannel.send(embed);"
    ],
    "description": "Creates an embed object with fields to add content"
  },
  "embedCreatePlus": {
    "prefix": ["djs.embed+","ecreate+", "embedjs+", "emdjs+", "embed+"],
    "body": [
      "const embed = new Discord.EmbedBuilder()",
            "\t.setColor('${1:#fcd0da}')",
            "\t.setTitle('${2:title}')",
            "\t.setURL('${3:https://discord.js.org/}')",
            "\t.setAuthor({ name:'${4:name}', iconURL:'${5:https://i.imgur.com/nEhvGhb.png}', '${6:https://discord.js.org}'})",
            "\t.setDescription('${7:description}')",
            "\t.setThumbnail('${8:https://i.imgur.com/nEhvGhb.png}')",
            "\t.addFields(",
            "\t\t{ name: '${9:title}', value: '${10:value}', inline: ${11:false} },",
            "\t)",
            "\t.setImage('${12:https://i.imgur.com/nEhvGhb.png}')",
            "\t.setTimestamp('${13:timestamp}')",
            "\t.setFooter({ text: '${14:footer}', iconURL: '${15:https://i.imgur.com/nEhvGhb.png}'});",
            "",
            "\tchannel.send({ embeds: [embed] });"
    ],
    "description": "Creates an embed object with advanced fields to add content"
  },
  "scratchDjs": {
    "prefix": ["djs.scratch","scratchDjs", "basedjs"],
    "body": [
      "const Discord = require('discord.js');",
      "const Client = new Discord.Client({ /* options */ });",
      "Client.login('TOKEN');"
    ],
    "description": "Imports the discord.js library and creates a simple client instance."
  },

  "channelCreate": {
		"prefix": "djs.channelCreate",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelCreate, (channel) => {",
            "\t${2:console.log(channel);}",
            "});"
		],
        "description": "Create a channelCreate."
    },

    "channelDelete": {
		"prefix": "djs.channelDelete",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelDelete, (channel) => {",
            "\t${2:console.log(channel);}",
            "});"
		],
        "description": "Create a channelDelete."
    },

    "channelPinsUpdate": {
		"prefix": "djs.channelPinsUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelPinsUpdate, (channel, time) => {",
            "\t${2:console.log(channel, time);}",
            "});"
		],
        "description": "Create a channelPinsUpdate."
    },

    "channelUpdate": {
		"prefix": "djs.channelUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelUpdate, (oldChannel, newChannel) => {",
            "\t${2:console.log(oldChannel, newChannel);}",
            "});"
		],
        "description": "Create a channelUpdate."
    },

    "applicationCommandPermissionsUpdate": {
        "prefix": "djs.applicationCommandPermissionsUpdate",
        "body": [
            "${1:client}.on(Discord.Events.ApplicationCommandPermissionsUpdate, (request) => {",
            "\t${2:console.log(request)}",
            "});"
        ],
        "description": "Create a applicationCommandPermissionsUpdate"
    },

    "debug": {
		"prefix": "djs.debug",
		"body": [       
            "${1:client}.on('Discord.Events.Debug, (info) => {",
            "\t${2:console.log(info);}",
            "});"
		],
        "description": "Create a debug."
    },

    "emojiCreate": {
		"prefix": "djs.emojiCreate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildEmojiCreate', (emoji) => {",
            "\t${2:console.log(emoji);}",
            "});"
		],
        "description": "Create a emojiCreate."
    },

    "emojiDelete": {
		"prefix": "djs.emojiDelete",
		"body": [       
            "${1:client}.on(Discord.Events.GuildEmojiDelete, (emoji) => {",
            "\t${2:console.log(emoji);}",
            "});"
		],
        "description": "Create a emojiDelete."
    },

    "emojiUpdate": {
		"prefix": "djs.emojiUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildEmojiUpdate, (oldEmoji, newEmoji) => {",
            "\t${2:console.log(oldEmoji, newEmoji);}",
            "});"
		],
        "description": "Create a emojiUpdate."
    },

    "error": {
		"prefix": "djs.error",
		"body": [       
            "${1:client}.on(Discord.Events.Error, (error) => {",
            "\t${2:console.log(error);}",
            "});"
		],
        "description": "Create a error."
    },

    "guildBanAdd": {
		"prefix": "djs.guildBanAdd",
		"body": [       
            "${1:client}.on(Discord.Events.GuildBanAdd, (guild, user) => {",
            "\t${2:console.log(guild, user);}",
            "});"
		],
        "description": "Create a guildBanAdd."
    },

    "guildBanRemove": {
		"prefix": "djs.guildBanRemove",
		"body": [       
            "${1:client}.on(Discord.Events.GuildBanRemove, (guild, user) => {",
            "\t${2:console.log(guild, user);}",
            "});"
		],
        "description": "Create a guildBanRemove."
    },

    "guildCreate": {
		"prefix": "djs.guildCreate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildCreate, (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a guildCreate."
    },

    "guildDelete": {
		"prefix": "djs.guildDelete",
		"body": [       
            "${1:client}.on(Discord.Events.GuildDelete', (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a guildDelete."
    },

    "guildIntegrationsUpdate": {
		"prefix": "djs.guildIntegrationsUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildIntegrationsUpdate, (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a guildIntegrationsUpdate."
    },

    "guildMemberAdd": {
		"prefix": "djs.guildMemberAdd",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberAdd, (member) => {",
            "\t${2:console.log(member);}",
            "});"
		],
        "description": "Create a guildMemberAdd."
    },

    "guildMemberRemove": {
		"prefix": "djs.guildMemberRemove",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberRemove, (member) => {",
            "\t${2:console.log(member);}",
            "});"
		],
        "description": "Create a guildMemberRemove."
    },

    "guildMemberAvailable": {
		"prefix": "djs.guildMemberAvailable",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberAvailable, (member) => {",
            "\t${2:console.log(member);}",
            "});"
		],
        "description": "Create a guildMemberAvailable."
    },

    "guildMemberUpdate": {
		"prefix": "djs.guildMemberUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberUpdate, (oldMember, newMember) => {",
            "\t${2:console.log(oldMember, newMember);}",
            "});"
		],
        "description": "Create a guildMemberUpdate."
    },

    "guildMembersChunk": {
		"prefix": "djs.guildMembersChunk",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMembersChunk, (members, guild) => {",
            "\t${2:console.log(members, guild);}",
            "});"
		],
        "description": "Create a guildMembersChunk."
    },

    "guildUnavailable": {
		"prefix": "djs.guildUnavailable",
		"body": [       
            "${1:client}.on(Discord.Events.GuildUnavailable, (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a guildUnavailable."
    },

    "guildUpdate": {
		"prefix": "djs.guildUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildUpdate, (oldGuild, newGuild) => {",
            "\t${2:console.log(oldGuild, newGuild);}",
            "});"
		],
        "description": "Create a guildUpdate."
    },

    "messageDelete": {
		"prefix": "djs.messageDelete",
		"body": [       
            "${1:client}.on(Discord.Events.MessageDelete, (message) => {",
            "\t${2:console.log(message);}",
            "});"
		],
        "description": "Create a messageDelete."
    },

    "messageDeleteBulk": {
		"prefix": "djs.messageDeleteBulk",
		"body": [       
            "${1:client}.on(Discord.Events.MessageDeleteBulk, (messages) => {",
            "\t${2:console.log(messages);}",
            "});"
		],
        "description": "Create a messageDeleteBulk."
    },

    "messageReactionAdd": {
		"prefix": "djs.messageReactionAdd",
		"body": [       
            "${1:client}.on(Discord.Events.MessageReactionAdd, (messageReaction, user) => {",
            "\t${2:console.log(messageReaction, user);}",
            "});"
		],
        "description": "Create a messageReactionAdd."
    },

    "messageReactionRemove": {
		"prefix": "djs.messageReactionRemove",
		"body": [       
            "${1:client}.on(Discord.Events.MessageReactionRemove, (messageReaction, user) => {",
            "\t${2:console.log(messageReaction, user);}",
            "});"
		],
        "description": "Create a messageReactionRemove."
    },

    "messageUpdate": {
		"prefix": "djs.messageUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.MessageUpdate, (oldMessage, newMessage) => {",
            "\t${2:console.log(oldMessage, newMessage);}",
            "});"
		],
        "description": "Create a messageUpdate."
    },

    "presenceUpdate": {
		"prefix": "djs.presenceUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.PresenceUpdate, (oldMember, newMember) => {",
            "\t${2:console.log(oldMember, newMember);}",
            "});"
		],
        "description": "Create a presenceUpdate."
    },

    "rateLimit": {
		"prefix": "djs.rateLimit",
		"body": [       
            "${1:client}.on('rateLimit', (rateLimitInfo, rateLimitInfo.limit, rateLimitInfo.timeDifference, rateLimitInfo.path, rateLimitInfo.method) => {",
            "\t${2:console.log(rateLimitInfo, rateLimitInfo.limit, rateLimitInfo.timeDifference, rateLimitInfo.path, rateLimitInfo.method);}",
            "});"
		],
        "description": "Create a rateLimit."
    },

    "ready": {
		"prefix": "djs.ready",
		"body": [       
            "${1:client}.on(Discord.Events.ClientReady, (client) => {",
            "\t${2:console.log(client.user.username);}",
            "});"
		],
        "description": "Create a ready."
    },

    "reconnecting": {
		"prefix": "djs.reconnecting",
		"body": [       
            "${1:client}.on(Discord.Events.ShardReconnecting, (id) => {",
            "\t${2:console.log(id);}",
            "});"
		],
        "description": "Create a default Discord bot's shard reconnecting."
    },

    "resume": {
		"prefix": "djs.resume",
		"body": [       
            "${1:client}.on(Discord.Events.shardResume, (id, replayedEvents) => {",
            "\t${2:console.log(id, replayedEvents);}",
            "});"
		],
        "description": "Create a resume."
    },

    "roleCreate": {
		"prefix": "djs.roleCreate",
		"body": [       
            "${1:client}.on(Discord.Events.RoleCreate, (role) => {",
            "\t${2:console.log(role);}",
            "});"
		],
        "description": "Create a roleCreate."
    },

    "roleDelete": {
		"prefix": "djs.roleDelete",
		"body": [       
            "${1:client}.on(Discord.Events.RoleDelete, (role) => {",
            "\t${2:console.log(role);}",
            "});"
		],
        "description": "Create a roleDelete."
    },

    "roleUpdate": {
		"prefix": "djs.roleUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.RoleUpdate, (oldRole, newRole) => {",
            "\t${2:console.log(oldRole, newRole);}",
            "});"
		],
        "description": "Create a roleUpdate."
    },

    "typingStart": {
		"prefix": "djs.typingStart",
		"body": [       
            "${1:client}.on(Discord.Events.TypingStart, (channel, user) => {",
            "\t${2:console.log(channel, user);}",
            "});"
		],
        "description": "Create a typingStart."
    },

    "userUpdate": {
		"prefix": "djs.userUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.UserUpdate, (oldUser, newUser) => {",
            "\t${2:console.log(oldUser, newUser);}",
            "});"
		],
        "description": "Create a userUpdate."
    },

    "voiceStateUpdate": {
		"prefix": "djs.voiceStateUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.VoiceStateUpdate, (oldMember, newMember) => {",
            "\t${2:console.log(oldMember, newMember);}",
            "});"
		],
        "description": "Create a voiceStateUpdate."
    },

    "warn": {
		"prefix": "djs.warn",
		"body": [       
            "${1:client}.on(Discord.Events.Warn, (info) => {",
            "\t${2:console.log(info);}",
            "});"
		],
        "description": "Create a warn."
    },

    "webhookUpdate": {
		"prefix": "djs.webhooksUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.WebhooksUpdate, (channel) => {",
            "\t${2:console.log(channel);}",
            "});"
		],
        "description": "Create a webhookUpdate."
    },

    "AutoModerationActionExecution": {
        "prefix": "djs.autoModerationActionExecution",
        "body": [
            "${1:client}.on(Discord.Events.AutoModerationActionExecution, (data) => {",
            "\t${2:console.log(data);}",
            "});"
        ],
        "description": "Create a AutoModerationActionExecution."
    }
}
