{
  "constDiscord ~ Rawr": {
    "prefix": ["req.discord","cdjs"],
    "body": "const { Client, Collection, GatewayIntentBits, Partials, Events } = require('discord.js');",
    "description": "Adds default consts from discord.js"
  },
  "constClient ~ Rawr": {
    "prefix": ["req.client","cclt"],
    "body": "const { Client } = require('discord.js');",
    "description": "Adds const Client from discord.js"
  },
  "reqDiscord ~ Rawr": {
    "prefix": ["req.djs","cclt"],
    "body": "const { ${1:name} } = require('discord.js');",
    "description": "Adds const from discord.js"
  },
  "djsEvent ~ Rawr": {
    "prefix": ["djs.event","edjs", "eventdjs", "evdjs"],
    "body": [
      "module.exports = {",
            "   name: \"\",",
            "",
            "   run: async () => {",
            "",
            "    },",
            "};"
    ],
    "description": "Creates a basic event for Discord bot using the discord.js"
  },
  "djsSlashCmd ~ Rawr": {
    "prefix": ["djs.slash","sldjs", "slashdjs", "sladjs"],
    "body": [
      "const Discord = require('discord.js');",
            "",
            "module.exports = {",
            "    data: {",
            "        name: \"\",",
            "        description: \"\",",
            "        options: [",
            "            {",
            "                name: \"\",",
            "                type: 3,",
            "                description: \"\",",
            "                required: true",
            "            }",
            "        ]",
            "    },",
            "",
            "    run: async (interaction) => {",
            "",
            "    },",
            "};"
    ],
    "description": "Creates a basic slash command for Discord bot using the discord.js"
  },
  "messageSend ~ Rawr": {
    "prefix": ["djs.msg","msgdjs", "mchannel", "mdjs"],
    "body" : "${1:message}.channel.send(`${2:urmessage}`)",
    "description":"Sends a message to the channel where the command was called."
  },
  "embedCreate ~ Rawr": {
    "prefix": ["djs.embed","ecreate", "embedjs", "emdjs"],
    "body": [
      "const embed = new Discord.EmbedBuilder()",
            "\t.setColor(0xfcd0da)",
            "\t.setTitle('${1:title}')",
            "\t.setDescription('${2:description}')",
            "\t.addFields(",
            "\t\t{ name: '${3:title}', value: '${4:value}', inline: ${5:false} },",
            "\t)",
            "",
            "\tchannel.send(embed);"
    ],
    "description": "Creates an embed object with fields to add content"
  },
  "embedCreatePlus ~ Rawr": {
    "prefix": ["djs.embed+","ecreate+", "embedjs+", "emdjs+", "embed+"],
    "body": [
      "const embed = new Discord.EmbedBuilder()",
            "\t.setColor('${1:#fcd0da}')",
            "\t.setTitle('${2:title}')",
            "\t.setURL('${3:https://discord.js.org/}')",
            "\t.setAuthor({ name:'${4:name}', iconURL:'${5:https://i.imgur.com/nEhvGhb.png}', '${6:https://discord.js.org}'})",
            "\t.setDescription('${7:description}')",
            "\t.setThumbnail('${8:https://i.imgur.com/nEhvGhb.png}')",
            "\t.addFields(",
            "\t\t{ name: '${9:title}', value: '${10:value}', inline: ${11:false} },",
            "\t)",
            "\t.setImage('${12:https://i.imgur.com/nEhvGhb.png}')",
            "\t.setTimestamp('${13:timestamp}')",
            "\t.setFooter({ text: '${14:footer}', iconURL: '${15:https://i.imgur.com/nEhvGhb.png}'});",
            "",
            "\tchannel.send({ embeds: [embed] });"
    ],
    "description": "Creates an embed object with advanced fields to add content"
  },
  "scratchDjs ~ Rawr": {
    "prefix": ["djs.scratch","scratchDjs", "basedjs"],
    "body": [
      "const Discord = require('discord.js');",
      "const Client = new Discord.Client({ /* options */ });",
      "Client.login('TOKEN');"
    ],
    "description": "Imports the discord.js library and creates a simple client instance."
  },

  "channelCreate ~ Rawr": {
		"prefix": "djs.channelCreate",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelCreate, (channel) => {",
            "\t${2:console.log(channel);}",
            "});"
		],
        "description": "Create a channelCreate."
    },

    "channelDelete ~ Rawr": {
		"prefix": "djs.channelDelete",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelDelete, (channel) => {",
            "\t${2:console.log(channel);}",
            "});"
		],
        "description": "Create a channelDelete."
    },

    "channelPinsUpdate ~ Rawr": {
		"prefix": "djs.channelPinsUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelPinsUpdate, (channel, time) => {",
            "\t${2:console.log(channel, time);}",
            "});"
		],
        "description": "Create a channelPinsUpdate."
    },

    "channelUpdate ~ Rawr": {
		"prefix": "djs.channelUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelUpdate, (oldChannel, newChannel) => {",
            "\t${2:console.log(oldChannel, newChannel);}",
            "});"
		],
        "description": "Create a channelUpdate."
    },

    "applicationCommandPermissionsUpdate ~ Rawr": {
        "prefix": "djs.applicationCommandPermissionsUpdate",
        "body": [
            "${1:client}.on(Discord.Events.ApplicationCommandPermissionsUpdate, (request) => {",
            "\t${2:console.log(request)}",
            "});"
        ],
        "description": "Create a applicationCommandPermissionsUpdate"
    },

    "debug ~ Rawr": {
		"prefix": "djs.debug",
		"body": [       
            "${1:client}.on('Discord.Events.Debug, (info) => {",
            "\t${2:console.log(info);}",
            "});"
		],
        "description": "Create a debug."
    },

    "emojiCreate ~ Rawr": {
		"prefix": "djs.emojiCreate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildEmojiCreate', (emoji) => {",
            "\t${2:console.log(emoji);}",
            "});"
		],
        "description": "Create a emojiCreate."
    },

    "emojiDelete ~ Rawr": {
		"prefix": "djs.emojiDelete",
		"body": [       
            "${1:client}.on(Discord.Events.GuildEmojiDelete, (emoji) => {",
            "\t${2:console.log(emoji);}",
            "});"
		],
        "description": "Create a emojiDelete."
    },

    "emojiUpdate ~ Rawr": {
		"prefix": "djs.emojiUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildEmojiUpdate, (oldEmoji, newEmoji) => {",
            "\t${2:console.log(oldEmoji, newEmoji);}",
            "});"
		],
        "description": "Create a emojiUpdate."
    },

    "error ~ Rawr": {
		"prefix": "djs.error",
		"body": [       
            "${1:client}.on(Discord.Events.Error, (error) => {",
            "\t${2:console.log(error);}",
            "});"
		],
        "description": "Create a error."
    },

    "guildBanAdd ~ Rawr": {
		"prefix": "djs.guildBanAdd",
		"body": [       
            "${1:client}.on(Discord.Events.GuildBanAdd, (guild, user) => {",
            "\t${2:console.log(guild, user);}",
            "});"
		],
        "description": "Create a guildBanAdd."
    },

    "guildBanRemove ~ Rawr": {
		"prefix": "djs.guildBanRemove",
		"body": [       
            "${1:client}.on(Discord.Events.GuildBanRemove, (guild, user) => {",
            "\t${2:console.log(guild, user);}",
            "});"
		],
        "description": "Create a guildBanRemove."
    },

    "guildCreate ~ Rawr": {
		"prefix": "djs.guildCreate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildCreate, (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a guildCreate."
    },

    "guildDelete ~ Rawr": {
		"prefix": "djs.guildDelete",
		"body": [       
            "${1:client}.on(Discord.Events.GuildDelete', (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a guildDelete."
    },

    "guildIntegrationsUpdate ~ Rawr": {
		"prefix": "djs.guildIntegrationsUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildIntegrationsUpdate, (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a guildIntegrationsUpdate."
    },

    "guildMemberAdd ~ Rawr": {
		"prefix": "djs.guildMemberAdd",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberAdd, (member) => {",
            "\t${2:console.log(member);}",
            "});"
		],
        "description": "Create a guildMemberAdd."
    },

    "guildMemberRemove ~ Rawr": {
		"prefix": "djs.guildMemberRemove",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberRemove, (member) => {",
            "\t${2:console.log(member);}",
            "});"
		],
        "description": "Create a guildMemberRemove."
    },

    "guildMemberAvailable ~ Rawr": {
		"prefix": "djs.guildMemberAvailable",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberAvailable, (member) => {",
            "\t${2:console.log(member);}",
            "});"
		],
        "description": "Create a guildMemberAvailable."
    },

    "guildMemberUpdate ~ Rawr": {
		"prefix": "djs.guildMemberUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberUpdate, (oldMember, newMember) => {",
            "\t${2:console.log(oldMember, newMember);}",
            "});"
		],
        "description": "Create a guildMemberUpdate."
    },

    "guildMembersChunk ~ Rawr": {
		"prefix": "djs.guildMembersChunk",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMembersChunk, (members, guild) => {",
            "\t${2:console.log(members, guild);}",
            "});"
		],
        "description": "Create a guildMembersChunk."
    },

    "guildUnavailable ~ Rawr": {
		"prefix": "djs.guildUnavailable",
		"body": [       
            "${1:client}.on(Discord.Events.GuildUnavailable, (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a guildUnavailable."
    },

    "guildUpdate ~ Rawr": {
		"prefix": "djs.guildUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildUpdate, (oldGuild, newGuild) => {",
            "\t${2:console.log(oldGuild, newGuild);}",
            "});"
		],
        "description": "Create a guildUpdate."
    },

    "messageDelete ~ Rawr": {
		"prefix": "djs.messageDelete",
		"body": [       
            "${1:client}.on(Discord.Events.MessageDelete, (message) => {",
            "\t${2:console.log(message);}",
            "});"
		],
        "description": "Create a messageDelete."
    },

    "messageDeleteBulk ~ Rawr": {
		"prefix": "djs.messageDeleteBulk",
		"body": [       
            "${1:client}.on(Discord.Events.MessageDeleteBulk, (messages) => {",
            "\t${2:console.log(messages);}",
            "});"
		],
        "description": "Create a messageDeleteBulk."
    },

    "messageReactionAdd ~ Rawr": {
		"prefix": "djs.messageReactionAdd",
		"body": [       
            "${1:client}.on(Discord.Events.MessageReactionAdd, (messageReaction, user) => {",
            "\t${2:console.log(messageReaction, user);}",
            "});"
		],
        "description": "Create a messageReactionAdd."
    },

    "messageReactionRemove ~ Rawr": {
		"prefix": "djs.messageReactionRemove",
		"body": [       
            "${1:client}.on(Discord.Events.MessageReactionRemove, (messageReaction, user) => {",
            "\t${2:console.log(messageReaction, user);}",
            "});"
		],
        "description": "Create a messageReactionRemove."
    },

    "messageUpdate ~ Rawr": {
		"prefix": "djs.messageUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.MessageUpdate, (oldMessage, newMessage) => {",
            "\t${2:console.log(oldMessage, newMessage);}",
            "});"
		],
        "description": "Create a messageUpdate."
    },

    "presenceUpdate ~ Rawr": {
		"prefix": "djs.presenceUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.PresenceUpdate, (oldMember, newMember) => {",
            "\t${2:console.log(oldMember, newMember);}",
            "});"
		],
        "description": "Create a presenceUpdate."
    },

    "rateLimit ~ Rawr": {
		"prefix": "djs.rateLimit",
		"body": [       
            "${1:client}.on('rateLimit', (rateLimitInfo, rateLimitInfo.limit, rateLimitInfo.timeDifference, rateLimitInfo.path, rateLimitInfo.method) => {",
            "\t${2:console.log(rateLimitInfo, rateLimitInfo.limit, rateLimitInfo.timeDifference, rateLimitInfo.path, rateLimitInfo.method);}",
            "});"
		],
        "description": "Create a rateLimit."
    },

    "ready ~ Rawr": {
		"prefix": "djs.ready",
		"body": [       
            "${1:client}.on(Discord.Events.ClientReady, (client) => {",
            "\t${2:console.log(client.user.username);}",
            "});"
		],
        "description": "Create a ready."
    },

    "reconnecting ~ Rawr": {
		"prefix": "djs.reconnecting",
		"body": [       
            "${1:client}.on(Discord.Events.ShardReconnecting, (id) => {",
            "\t${2:console.log(id);}",
            "});"
		],
        "description": "Create a default Discord bot's shard reconnecting."
    },

    "resume ~ Rawr": {
		"prefix": "djs.resume",
		"body": [       
            "${1:client}.on(Discord.Events.shardResume, (id, replayedEvents) => {",
            "\t${2:console.log(id, replayedEvents);}",
            "});"
		],
        "description": "Create a resume."
    },

    "roleCreate ~ Rawr": {
		"prefix": "djs.roleCreate",
		"body": [       
            "${1:client}.on(Discord.Events.RoleCreate, (role) => {",
            "\t${2:console.log(role);}",
            "});"
		],
        "description": "Create a roleCreate."
    },

    "roleDelete ~ Rawr": {
		"prefix": "djs.roleDelete",
		"body": [       
            "${1:client}.on(Discord.Events.RoleDelete, (role) => {",
            "\t${2:console.log(role);}",
            "});"
		],
        "description": "Create a roleDelete."
    },

    "roleUpdate ~ Rawr": {
		"prefix": "djs.roleUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.RoleUpdate, (oldRole, newRole) => {",
            "\t${2:console.log(oldRole, newRole);}",
            "});"
		],
        "description": "Create a roleUpdate."
    },

    "typingStart ~ Rawr": {
		"prefix": "djs.typingStart",
		"body": [       
            "${1:client}.on(Discord.Events.TypingStart, (channel, user) => {",
            "\t${2:console.log(channel, user);}",
            "});"
		],
        "description": "Create a typingStart."
    },

    "userUpdate ~ Rawr": {
		"prefix": "djs.userUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.UserUpdate, (oldUser, newUser) => {",
            "\t${2:console.log(oldUser, newUser);}",
            "});"
		],
        "description": "Create a userUpdate."
    },

    "voiceStateUpdate ~ Rawr": {
		"prefix": "djs.voiceStateUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.VoiceStateUpdate, (oldMember, newMember) => {",
            "\t${2:console.log(oldMember, newMember);}",
            "});"
		],
        "description": "Create a voiceStateUpdate."
    },

    "warn ~ Rawr": {
		"prefix": "djs.warn",
		"body": [       
            "${1:client}.on(Discord.Events.Warn, (info) => {",
            "\t${2:console.log(info);}",
            "});"
		],
        "description": "Create a warn."
    },

    "webhookUpdate ~ Rawr": {
		"prefix": "djs.webhooksUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.WebhooksUpdate, (channel) => {",
            "\t${2:console.log(channel);}",
            "});"
		],
        "description": "Create a webhookUpdate."
    },

    "AutoModerationActionExecution ~ Rawr": {
        "prefix": "djs.autoModerationActionExecution",
        "body": [
            "${1:client}.on(Discord.Events.AutoModerationActionExecution, (data) => {",
            "\t${2:console.log(data);}",
            "});"
        ],
        "description": "Create a AutoModerationActionExecution."
    } 
}